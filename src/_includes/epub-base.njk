<!DOCTYPE html>
<html lang="{{ lang.code or 'en' }}">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SEED.html</title>
    <meta name="description" content="{{ 'meta_description' | i18n }}">
    <link rel="icon" href="/stewarthaines.ico">
    <link rel="stylesheet" href="/epub/seed.css">
    <script>
      // Automatic locale detection and redirect
      (function () {
        try { // Skip if user has previously selected a language
          const savedLocale = localStorage.getItem('user-selected-locale');
          if (savedLocale) 
            return;
          


          // Skip if URL has fragments or query parameters (shared links)
          if (window.location.hash || window.location.search) 
            return;
          


          // Get browser locale and current page locale
          const browserLocale = navigator.language.slice(0, 2);
          const supportedLocales = ['en', 'es', 'fr', 'de'];
          // Determine current locale from URL path
          const path = window.location.pathname;
          let currentLocale = 'en'; // default
          const pathMatch = path.match(/^\/([a-z]{2})\//);
          if (pathMatch && supportedLocales.includes(pathMatch[1])) {
            currentLocale = pathMatch[1];
          }
          // Redirect if browser locale is supported and different
          if (supportedLocales.includes(browserLocale) && browserLocale !== currentLocale) {
            let newPath = path;
            if (currentLocale === 'en') { // Add locale prefix to English path
              newPath = '/' + browserLocale + path;
            } else { // Replace existing locale prefix
              newPath = path.replace(/^\/[a-z]{2}\//, '/' + browserLocale + '/');
            }
            window.location.href = newPath;
          }
        } catch (e) { // Fail silently if localStorage or other features unavailable
        }
      })();
      // Dynamic subtitle switching
      document.addEventListener('DOMContentLoaded', function () {
        const subtitles = {
          'writers': '{{ "subtitle_simple" | i18n }}',
          'designers': '{{ "subtitle_semantic" | i18n }}',
          'developers': '{{ "subtitle_scripted" | i18n }}'
        };
        const subtitleElement = document.getElementById('current-subtitle');
        const radioButtons = document.querySelectorAll('input[name="audience"]');
        function updateSubtitle() {
          const checked = document.querySelector('input[name="audience"]:checked');
          if (checked && subtitles[checked.id] && subtitleElement) {
            subtitleElement.textContent = subtitles[checked.id];
          }
        }
        // Add event listeners to radio buttons
        radioButtons.forEach(function (radio) {
          radio.addEventListener('change', updateSubtitle);
        });
        // Set initial subtitle
        updateSubtitle();
      });
      // Function to open EPUB in SEED iframe
      function openInSeed(epubPath) {
        const iframe = document.querySelector('.app-frame iframe');
        if (iframe) { // Create absolute URL
          const absoluteUrl = window.location.origin + epubPath;
          // URL encode the absolute URL
          const encodedUrl = encodeURIComponent(absoluteUrl);
          // Update iframe src with encoded URL as fragment
          iframe.src = '/epub/SEED.html#' + encodedUrl;
        }
      }
      // Focus trapping functionality
      function initializeFocusTrapping() {
        let focusableElementsData = [];
        // Get all potentially focusable elements
        function getAllFocusableElements() {
          const selectors = [
            'a[href]',
            'button:not([disabled])',
            'input:not([disabled])',
            'select:not([disabled])',
            'textarea:not([disabled])',
            '[tabindex]:not([tabindex="-1"])',
            '[contenteditable="true"]'
          ].join(',');
          return document.querySelectorAll(selectors);
        }
        // Store original tabindex values and disable background elements
        function disableBackgroundFocus() {
          const appFrame = document.querySelector('.app-frame.fullscreen');
          if (! appFrame) 
            return;
          


          const allFocusable = getAllFocusableElements();
          focusableElementsData = [];
          allFocusable.forEach(element => { // Skip elements within the fullscreen app-frame
            if (! appFrame.contains(element)) {
              const originalTabIndex = element.getAttribute('tabindex');
              focusableElementsData.push({element: element, originalTabIndex: originalTabIndex});
              element.setAttribute('tabindex', '-1');
            }
          });
        }
        // Restore original focus states
        function restoreBackgroundFocus() {
          focusableElementsData.forEach(({element, originalTabIndex}) => {
            if (originalTabIndex === null) {
              element.removeAttribute('tabindex');
            } else {
              element.setAttribute('tabindex', originalTabIndex);
            }
          });
          focusableElementsData = [];
        }
        return {enable: disableBackgroundFocus, disable: restoreBackgroundFocus};
      }
      // Enhanced fullscreen functionality with focus trapping
      function initializeFullscreen() {
        const appFrame = document.querySelector('.app-frame');
        const toggleButton = document.querySelector('.fullscreen-toggle');
        const body = document.body;
        if (! appFrame || ! toggleButton) 
          return;
        


        let isFullscreen = false;
        const focusTrapping = initializeFocusTrapping();
        function toggleFullscreen() {
          isFullscreen = ! isFullscreen;
          if (isFullscreen) {
            appFrame.classList.add('fullscreen');
            body.classList.add('fullscreen-active');
            toggleButton.setAttribute('aria-label', 'Exit fullscreen');
            toggleButton.setAttribute('title', 'Exit fullscreen');
            // Enable focus trapping
            focusTrapping.enable();
            // Focus the toggle button (primary focusable element in overlay)
            toggleButton.focus();
          } else {
            appFrame.classList.remove('fullscreen');
            body.classList.remove('fullscreen-active');
            toggleButton.setAttribute('aria-label', '{{ "toggle_fullscreen" | i18n }}');
            toggleButton.setAttribute('title', '{{ "toggle_fullscreen" | i18n }}');
            // Disable focus trapping
            focusTrapping.disable();
            // Return focus to toggle button
            toggleButton.focus();
          }
        }
        // Click handler
        toggleButton.addEventListener('click', toggleFullscreen);
        // ESC key handler
        document.addEventListener('keydown', function (e) {
          if (e.key === 'Escape' && isFullscreen) {
            toggleFullscreen();
          }
        });
        // Prevent scroll events from bubbling when fullscreen
        appFrame.addEventListener('wheel', function (e) {
          if (isFullscreen) {
            e.stopPropagation();
          }
        }, {passive: true});
        // Touch event handling for mobile
        appFrame.addEventListener('touchmove', function (e) {
          if (isFullscreen) {
            e.stopPropagation();
          }
        }, {passive: true});
      }
      // Initialize fullscreen when DOM is ready
      document.addEventListener('DOMContentLoaded', initializeFullscreen);
    </script>
  </head>
  <body>
    <a href="#main" class="skip-link">{{ 'skip_to_main' | i18n }}</a>
    <header>
      <div class="container">
        <a href="{{ '/' if lang.code == 'en' else '/' + lang.code + '/' }}" style="position: absolute; top: 20px; left: 20px; display: inline-flex; align-items: center; text-decoration: none; color: #666; font-size: 12px; z-index: 10;">
          <img
            alt="the Stewart Haines dot com logo"
            src="/images/logo_small.png"
            style="width: 16px; height: 16px; margin-right: 6px;"
          />
          <span>‚Üê Back</span>
        </a>
        <div class="header-content">
          <div class="header-text">
            <h1>SEED.html</h1>
            <div class="dynamic-subtitle" aria-live="polite">
              <h2 class="subtitle" id="current-subtitle">{{ 'subtitle_simple' | i18n }}</h2>
            </div>
            <p class="header-description">{{ 'hero_description' | i18n }}</p>
          </div>
        </div>
      </div>
    </header>
    <main id="main">
      <div class="container">
        {{ content | safe }}
      </div>
    </main>
    <!-- footer> <div class="container">
        <nav aria-label="{{ 'language_selection' | i18n }}" class="footer-language-nav">
          <div class="language-switcher">
            {% for language in languages %}
              <a href="{{ '/' if language.code == 'en' else '/' + language.code + '/' }}epub/" {% if language.code == lang.code %} aria-current="page" {% endif %} aria-label="{{ language.name }} {% if language.code == lang.code %}({{ 'current' | i18n }}){% else %}({{ language.name }} {{ 'version' | i18n }}){% endif %}" lang="{{ language.code }}" onclick="localStorage.setItem('user-selected-locale', '{{ language.code }}')">
                {{ language.code | upper }}
              </a>
            {% endfor %}
          </div>
        </nav>
    </div> </footer -->
  </body>
</html>