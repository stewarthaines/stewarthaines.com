<!DOCTYPE html>
<html lang="{{ lang.code or 'en' }}">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SEED.html</title>
    <meta name="description" content="{{ 'meta_description' | i18n }}">
    <link rel="icon" href="/stewarthaines.ico">
    <link rel="stylesheet" href="/sh2.css">
    <script>
      // Automatic locale detection and redirect
      (function () {
        try { // Skip if user has previously selected a language
          const savedLocale = localStorage.getItem('user-selected-locale');
          if (savedLocale) 
            return;
          


          // Skip if URL has fragments or query parameters (shared links)
          if (window.location.hash || window.location.search) 
            return;
          


          // Get browser locale and current page locale
          const browserLocale = navigator.language.slice(0, 2);
          const supportedLocales = ['en', 'es', 'fr', 'de'];
          // Determine current locale from URL path
          const path = window.location.pathname;
          let currentLocale = 'en'; // default
          const pathMatch = path.match(/^\/([a-z]{2})\//);
          if (pathMatch && supportedLocales.includes(pathMatch[1])) {
            currentLocale = pathMatch[1];
          }
          // Redirect if browser locale is supported and different
          if (supportedLocales.includes(browserLocale) && browserLocale !== currentLocale) {
            let newPath = path;
            if (currentLocale === 'en') { // Add locale prefix to English path
              newPath = '/' + browserLocale + path;
            } else { // Replace existing locale prefix
              newPath = path.replace(/^\/[a-z]{2}\//, '/' + browserLocale + '/');
            }
            window.location.href = newPath;
          }
        } catch (e) { // Fail silently if localStorage or other features unavailable
        }
      })();
      // Dynamic subtitle switching
      document.addEventListener('DOMContentLoaded', function () {
        const subtitles = {
          'writers': '{{ "subtitle_simple" | i18n }}',
          'designers': '{{ "subtitle_semantic" | i18n }}',
          'developers': '{{ "subtitle_scripted" | i18n }}'
        };
        const subtitleElement = document.getElementById('current-subtitle');
        const radioButtons = document.querySelectorAll('input[name="audience"]');
        function updateSubtitle() {
          const checked = document.querySelector('input[name="audience"]:checked');
          if (checked && subtitles[checked.id] && subtitleElement) {
            subtitleElement.textContent = subtitles[checked.id];
          }
        }
        // Add event listeners to radio buttons
        radioButtons.forEach(function (radio) {
          radio.addEventListener('change', updateSubtitle);
        });
        // Set initial subtitle
        updateSubtitle();
      });
      // Function to open EPUB in SEED iframe
      function openInSeed(epubPath) {
        const iframe = document.querySelector('.app-frame iframe');
        if (iframe) { // Create absolute URL
          const absoluteUrl = window.location.origin + epubPath;
          // URL encode the absolute URL
          const encodedUrl = encodeURIComponent(absoluteUrl);
          // Update iframe src with encoded URL as fragment
          iframe.src = '/epub/SEED.html#' + encodedUrl;
        }
      }
      // Focus trapping functionality
      function initializeFocusTrapping() {
        let focusableElementsData = [];
        // Get all potentially focusable elements
        function getAllFocusableElements() {
          const selectors = [
            'a[href]',
            'button:not([disabled])',
            'input:not([disabled])',
            'select:not([disabled])',
            'textarea:not([disabled])',
            '[tabindex]:not([tabindex="-1"])',
            '[contenteditable="true"]'
          ].join(',');
          return document.querySelectorAll(selectors);
        }
        // Store original tabindex values and disable background elements
        function disableBackgroundFocus() {
          const appFrame = document.querySelector('.app-frame.fullscreen');
          if (! appFrame) 
            return;
          


          const allFocusable = getAllFocusableElements();
          focusableElementsData = [];
          allFocusable.forEach(element => { // Skip elements within the fullscreen app-frame
            if (! appFrame.contains(element)) {
              const originalTabIndex = element.getAttribute('tabindex');
              focusableElementsData.push({element: element, originalTabIndex: originalTabIndex});
              element.setAttribute('tabindex', '-1');
            }
          });
        }
        // Restore original focus states
        function restoreBackgroundFocus() {
          focusableElementsData.forEach(({element, originalTabIndex}) => {
            if (originalTabIndex === null) {
              element.removeAttribute('tabindex');
            } else {
              element.setAttribute('tabindex', originalTabIndex);
            }
          });
          focusableElementsData = [];
        }
        return {enable: disableBackgroundFocus, disable: restoreBackgroundFocus};
      }
      // Enhanced fullscreen functionality with focus trapping
      function initializeFullscreen() {
        const appFrame = document.querySelector('.app-frame');
        const toggleButton = document.querySelector('.fullscreen-toggle');
        const body = document.body;
        if (! appFrame || ! toggleButton) 
          return;
        


        let isFullscreen = false;
        const focusTrapping = initializeFocusTrapping();
        function toggleFullscreen() {
          isFullscreen = ! isFullscreen;
          if (isFullscreen) {
            appFrame.classList.add('fullscreen');
            body.classList.add('fullscreen-active');
            toggleButton.setAttribute('aria-label', 'Exit fullscreen');
            toggleButton.setAttribute('title', 'Exit fullscreen');
            // Enable focus trapping
            focusTrapping.enable();
            // Focus the toggle button (primary focusable element in overlay)
            toggleButton.focus();
          } else {
            appFrame.classList.remove('fullscreen');
            body.classList.remove('fullscreen-active');
            toggleButton.setAttribute('aria-label', '{{ "toggle_fullscreen" | i18n }}');
            toggleButton.setAttribute('title', '{{ "toggle_fullscreen" | i18n }}');
            // Disable focus trapping
            focusTrapping.disable();
            // Return focus to toggle button
            toggleButton.focus();
          }
        }
        // Click handler
        toggleButton.addEventListener('click', toggleFullscreen);
        // ESC key handler
        document.addEventListener('keydown', function (e) {
          if (e.key === 'Escape' && isFullscreen) {
            toggleFullscreen();
          }
        });
        // Prevent scroll events from bubbling when fullscreen
        appFrame.addEventListener('wheel', function (e) {
          if (isFullscreen) {
            e.stopPropagation();
          }
        }, {passive: true});
        // Touch event handling for mobile
        appFrame.addEventListener('touchmove', function (e) {
          if (isFullscreen) {
            e.stopPropagation();
          }
        }, {passive: true});
      }
      // Initialize fullscreen when DOM is ready
      document.addEventListener('DOMContentLoaded', initializeFullscreen);
    </script>
    <style>:root
    {
      /* WCAG AA compliant colors */
      --color-primary-accessible: #0056b3; /* 5.1:1 contrast with white */
      --color-primary-hover: #004085;
      --color-neutral-bg: #f8f9fa;
      --color-neutral-border: #dee2e6;
      --color-neutral-hover: #e9ecef;
      --color-text-muted: #495057;
      --color-focus: #005fcc;
      --color-focus-shadow: rgba(0, 95, 204, 0.2);
    }
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      color: #333;
      background: #fff;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    header {
      padding: 2rem 0;
      border-bottom: 1px solid #eee;
    }
    .header-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      gap: 1rem;
    }
    .header-text {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      align-items: center;
    }
    .header-description {
      font-size: 1rem;
      color: #666;
      margin: 0;
      line-height: 1.4;
    }
    main {
      padding: 2rem 0;
    }
    h1 {
      font-size: 2.5rem;
      font-weight: 600;
      margin-bottom: 0;
      font-family: monospace;
      letter-spacing: inherit;
    }
    .hero {
      text-align: center;
      margin-bottom: 4rem;
    }
    .hero p {
      font-size: 1.25rem;
      color: #666;
      margin: 0 auto;
      text-align: center;
    }
    .features {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }
    .feature {
      padding: 1.5rem;
      border: 1px solid #eee;
      border-radius: 8px;
    }
    .feature h3 {
      margin-bottom: 1rem;
      margin-top: 0;
      color: #333;
    }
    .app-frame {
      margin: 3rem 0;
      border: 1px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .app-frame iframe {
      width: 100%;
      height: 75vw;
      max-height: 600px;
      border: none;
      display: block;
    }
    /* Visually hide radio inputs but keep in tab sequence */
    input[name="audience"] {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }
    /* Audience Selector Styles */
    .audience-selector {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin: 2rem 0;
      flex-wrap: wrap;
    }
    .audience-selector label {
      padding: 0.75rem 1.5rem;
      background: var(--color-neutral-bg);
      border: 2px solid var(--color-neutral-hover);
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s ease;
      font-weight: 500;
      color: var(--color-text-muted);
    }
    .audience-selector label:hover {
      background: var(--color-neutral-hover);
      border-color: var(--color-neutral-border);
    }
    /* Show selected state */
    #writers:checked ~ .audience-selector-fieldset .audience-selector label[for="writers"],
    #designers:checked ~ .audience-selector-fieldset .audience-selector label[for="designers"],
    #developers:checked ~ .audience-selector-fieldset .audience-selector label[for="developers"] {
      background: var(--color-primary-accessible);
      border-color: var(--color-primary-accessible);
      color: white;
    }
    /* Show focus state for radio buttons */
    #writers:focus ~ .audience-selector-fieldset .audience-selector label[for="writers"],
    #designers:focus ~ .audience-selector-fieldset .audience-selector label[for="designers"],
    #developers:focus ~ .audience-selector-fieldset .audience-selector label[for="developers"] {
      outline: 3px solid var(--color-focus);
      outline-offset: 2px;
      box-shadow: 0 0 0 6px var(--color-focus-shadow);
    }
    /* Feature Set Visibility Logic */
    .feature-set {
      display: none;
    }
    /* Show appropriate feature set based on checked radio */
    #writers:checked ~ .audience-selector-fieldset ~ .features .writers-features,
    #designers:checked ~ .audience-selector-fieldset ~ .features .designers-features,
    #developers:checked ~ .audience-selector-fieldset ~ .features .developers-features {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }
    /* Language Switcher Styles */
    .language-switcher {
      display: flex;
      gap: 0.25rem;
    }
    .language-switcher a {
      padding: 0.375rem 0.5rem;
      background: var(--color-neutral-bg);
      border: 1px solid var(--color-neutral-border);
      border-radius: 3px;
      text-decoration: none;
      color: var(--color-text-muted);
      font-weight: 500;
      font-size: 0.75rem;
      transition: all 0.2s ease;
      min-width: 2rem;
      text-align: center;
    }
    .language-switcher a:hover {
      background: var(--color-neutral-hover);
      border-color: #adb5bd;
    }
    .language-switcher a[aria-current="page"] {
      background: var(--color-primary-accessible);
      border-color: var(--color-primary-accessible);
      color: white;
    }
    /* Dynamic Subtitle Styles */
    .dynamic-subtitle {
      text-align: center;
      margin: 0.5rem 0;
    }
    .dynamic-subtitle .subtitle {
      font-size: 1.25rem;
      font-weight: 400;
      color: var(--color-text-muted);
      margin: 0;
    }
    /* Sample Files Section */
    .sample-files {
      margin: 3rem 0;
      padding: 1.5rem;
      background: var(--color-neutral-bg);
      border-radius: 8px;
    }
    .sample-files h2 {
      margin-bottom: 1.5rem;
      color: #333;
      text-align: center;
    }
    .sample-set {
      display: none;
    }
    .sample-set ul {
      list-style: none;
      padding: 0;
      max-width: 600px;
      margin: 0 auto;
    }
    .sample-set li {
      margin-bottom: 1rem;
      padding: 1rem;
      background: white;
      border-radius: 6px;
      border: 1px solid var(--color-neutral-border);
    }
    .sample-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 1rem;
    }
    .sample-name {
      font-weight: 500;
      color: #333;
      flex-grow: 1;
    }
    .sample-buttons {
      display: flex;
      gap: 0.5rem;
    }
    .btn-open,
    .btn-download {
      padding: 0.375rem 0.75rem;
      border-radius: 4px;
      font-size: 0.875rem;
      font-weight: 500;
      text-decoration: none;
      border: 1px solid var(--color-primary-accessible);
      transition: all 0.2s ease;
      cursor: pointer;
    }
    .btn-open {
      background: var(--color-primary-accessible);
      color: white;
      border: 1px solid var(--color-primary-accessible);
    }
    .btn-open:hover {
      background: var(--color-primary-hover);
      border-color: var(--color-primary-hover);
    }
    .btn-download {
      background: white;
      color: var(--color-primary-accessible);
      border: 1px solid var(--color-primary-accessible);
    }
    .btn-download:hover {
      background: var(--color-primary-accessible);
      color: white;
    }
    /* Show appropriate sample set based on checked radio */
    #writers:checked ~ .audience-selector-fieldset ~ .features ~ .sample-files .writers-samples,
    #designers:checked ~ .audience-selector-fieldset ~ .features ~ .sample-files .designers-samples,
    #developers:checked ~ .audience-selector-fieldset ~ .features ~ .sample-files .developers-samples {
      display: block;
    }
    @media(max-width: 768px) {
      h1 {
        font-size: 2rem;
      }
      .hero p {
        font-size: 1.1rem;
      }
      main {
        padding: 1.5rem 0;
      }
      .header-content {
        gap: 1rem;
      }
      .header-text {
        gap: 0.25rem;
      }
      .header-description {
        font-size: 0.9rem;
      }
      .dynamic-subtitle {
        margin: 1rem 0;
      }
      .features {
        margin-top: 1.5rem;
      }
      .sample-files {
        margin: 2rem 0;
        padding: 1rem;
      }
    }
    /* Footer Styles */
    footer {
      padding: 2rem 0;
      border-top: 1px solid #eee;
      margin-top: 2rem;
    }
    .footer-language-nav {
      display: flex;
      justify-content: center;
    }
    /* App Frame and Fullscreen Styles */
    .app-frame {
      position: relative;
    }
    .app-frame-header {
      position: absolute;
      top: 0;
      right: 0;
      z-index: 10;
    }
    .fullscreen-toggle {
      background: rgba(255, 255, 255, 0.9);
      border: 1px solid var(--color-neutral-border);
      border-radius: 8px;
      padding: 0.5rem 0.75rem;
      cursor: pointer;
      font-size: 1.25rem;
      transition: all 0.2s ease;
      backdrop-filter: blur(4px);
    }
    .fullscreen-toggle:hover {
      background: rgba(255, 255, 255, 1);
      border-color: var(--color-primary-accessible);
    }
    .fullscreen-toggle:focus {
      outline: 3px solid var(--color-focus);
      outline-offset: -3px;
    }
    /* Icon visibility logic */
    .fullscreen-icon.compress {
      display: none;
    }
    .app-frame.fullscreen .fullscreen-icon.expand {
      display: none;
    }
    .app-frame.fullscreen .fullscreen-icon.compress {
      display: inline;
    }
    /* Fullscreen overlay state */
    .app-frame.fullscreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 9999;
      background: white;
      margin: 0; /* Override the default 3rem 0 margins to prevent clipping */
    }
    .app-frame.fullscreen iframe {
      height: 100vh;
      max-height: none;
    }
    .app-frame.fullscreen .app-frame-header {
      border-radius: 0 0 0 4px;
    }
    .app-frame.fullscreen .fullscreen-toggle {
      background: rgba(255, 255, 255, 0.9);
      color: #333;
    }
    /* Body scroll lock when fullscreen active */
    body.fullscreen-active {
      overflow: hidden;
    }
    /* License Section Styles */
    .license-section {
      margin: 3rem 0 2rem;
      padding: 2rem;
      border: 1px solid var(--color-neutral-border);
      border-radius: 8px;
      background: var(--color-neutral-bg);
      text-align: center;
    }
    .license-section h2 {
      margin-top: 0;
      margin-bottom: 1.5rem;
      color: var(--color-text);
      font-size: 1.5rem;
    }
    .license-text {
      font-size: 0.85rem;
      line-height: 1.5;
      color: var(--color-text-muted);
      margin-bottom: 2rem;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
      white-space: pre-wrap;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
      text-align: left;
      background: none;
      border: none;
      padding: 0;
    }
    .download-button {
      display: inline-block !important;
      padding: 1rem 2rem !important;
      font-size: 1.1rem !important;
      font-weight: 600 !important;
      color: white !important;
      background: var(--color-primary-accessible) !important;
      border: none !important;
      border-radius: 8px !important;
      text-decoration: none !important;
      transition: all 0.2s ease !important;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
    }
    .download-button:hover {
      background: var(--color-primary-hover) !important;
      transform: translateY(-1px) !important;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15) !important;
      text-decoration: none !important;
      color: white !important;
    }
    .download-button:focus {
      outline: 3px solid var(--color-focus);
      outline-offset: 2px;
      box-shadow: 0 0 0 6px var(--color-focus-shadow);
    }
    @media(max-width: 768px) {
      .license-section {
        margin: 2rem 0;
        padding: 1.5rem;
      }
      .download-button {
        width: 100%;
        max-width: 300px;
      }
    }
  </style>
</head>
<body>
  <a href="#main" class="skip-link">{{ 'skip_to_main' | i18n }}</a>
  <header>
    <div class="container">
      <div class="header-content">
        <div class="header-text">
          <h1>SEED.html</h1>
          <div class="dynamic-subtitle" aria-live="polite">
            <h2 class="subtitle" id="current-subtitle">{{ 'subtitle_simple' | i18n }}</h2>
          </div>
          <p class="header-description">{{ 'hero_description' | i18n }}</p>
        </div>
      </div>
    </div>
  </header>
  <main id="main">
    <div class="container">
      {{ content | safe }}
    </div>
  </main>
  <footer>
    <div class="container">
      <nav aria-label="{{ 'language_selection' | i18n }}" class="footer-language-nav">
        <div class="language-switcher">
          {% for language in languages %}
            <a href="{{ '/' if language.code == 'en' else '/' + language.code + '/' }}epub/" {% if language.code == lang.code %} aria-current="page" {% endif %} aria-label="{{ language.name }} {% if language.code == lang.code %}({{ 'current' | i18n }}){% else %}({{ language.name }} {{ 'version' | i18n }}){% endif %}" lang="{{ language.code }}" onclick="localStorage.setItem('user-selected-locale', '{{ language.code }}')">
              {{ language.code | upper }}
            </a>
          {% endfor %}
        </div>
      </nav>
    </div>
  </footer>
</body></html>